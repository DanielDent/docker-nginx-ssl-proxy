#!/usr/bin/with-contenv bash

if [ -z "$SERVERNAME" ]; then
    echo "ERROR: Server name must be specified..."
    exit 1
fi

if ! [ -z "$EXTRANAMES" ]; then
    EXTRANAMES="-d $EXTRANAMES"
fi

echo Waiting for Nginx to come up...
until curl --connect-timeout 1 http://127.0.0.1/; do
    sleep 1s
done
echo Nginx has arrived.

echo Waiting for a response from http://${SERVERNAME:-example.com}/
# --dns-servers 8.8.8.8 (ideal curl flag) is not available in default build
until curl --connect-timeout 1 http://${SERVERNAME:-example.com}/; do
    echo Request to http://${SERVERNAME:-example.com}/ failed.  Until Nginx is visible at this DNS, certificate verification cannot succeed.  To avoid hitting rate limits, this check will repeat every 15s until resolved.
    echo Let\'s Encrypt uses Google\'s DNS servers.  If you have already updated your DNS host, you can flush the Google DNS cache by completing the form at https://developers.google.com/speed/public-dns/cache
    sleep 15s
done
echo Something is responding at  http://${SERVERNAME:-example.com}/

while true; do

    if certbot certonly --non-interactive --webroot -w /usr/share/nginx/html --agree-tos \
            --rsa-key-size 2048 --keep-until-expiring --expand --register-unsafely-without-email -d $SERVERNAME $EXTRANAMES; then
        cp /etc/letsencrypt/live/${SERVERNAME:-example.com}/privkey.pem /etc/letsencrypt/privkey-copy.pem
        cp /etc/letsencrypt/live/${SERVERNAME:-example.com}/fullchain.pem /etc/letsencrypt/fullchain-copy.pem
        nginx -s reload
    else
        if [ -e /etc/letsencrypt/live/${SERVERNAME:-example.com}/fullchain.pem ]; then
            BIGSLEEP="$(( 360 + $(($RANDOM % 360)) ))"m # 6-12 hours
            sleep $BIGSLEEP
        fi
    fi

    SMALLSLEEP="$(( 150 + $(($RANDOM % 300)) ))"s # 2.5-7.5 minutes
    sleep $SMALLSLEEP

done
